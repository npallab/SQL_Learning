--Below are the SQL table definitions, sample data, and a set of 20 practice problems ranging from beginner to advanced levels.
CREATE DATABASE SQL_LEARNING

USE SQL_LEARNING

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(15)
);

INSERT INTO Customers (customer_id, name, email, phone) VALUES
(1, 'John Doe', 'john@example.com', '555-1234'),
(2, 'Jane Smith', 'jane@example.com', '555-5678'),
(3, 'Alice Johnson', 'alice@example.com', '555-8765');

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    category VARCHAR(50)
);

INSERT INTO Products (product_id, name, price, category) VALUES
(1, 'Laptop', 999.99, 'Electronics'),
(2, 'Smartphone', 499.99, 'Electronics'),
(3, 'Desk', 199.99, 'Furniture');

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

INSERT INTO Orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2023-06-01', 999.99),
(2, 2, '2023-06-03', 499.99),
(3, 3, '2023-06-05', 199.99);

CREATE TABLE OrderItems (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO OrderItems (order_item_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1, 999.99),
(2, 2, 2, 1, 499.99),
(3, 3, 3, 1, 199.99);

CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);

INSERT INTO Employees (employee_id, name, department, salary) VALUES
(1, 'Bob Brown', 'Sales', 50000.00),
(2, 'Sue Green', 'HR', 55000.00),
(3, 'Tom White', 'IT', 60000.00);

--Practice Problems
--Beginner Level

--Select all columns from the Customers table.

SELECT * from `SQL_LEARNING`.`Customers`

--Retrieve the name and email of all customers.

SELECT name,email from `SQL_LEARNING`.`Customers`

--Find all products with a price greater than $300.

SELECT * FROM `SQL_LEARNING`.`Products` WHERE price>300

-- Update the phone number of 'John Doe' to '555-9999'
UPDATE `SQL_LEARNING`.`Customers`
SET phone ='555-9999' WHERE name='John Doe'

--Join Orders and Customers to list all orders with customer names.

SELECT name, order_date,order_id,total_amount FROM `Customers` as T1 JOIN `Orders` as T2
ON `T1`.customer_id=T2.customer_id

--Calculate the total sales amount for each customer.
WITH OrderInfo(Customer_ID,Total_order) AS (SELECT customer_id,sum(total_amount) from `Orders` GROUP BY customer_id )
SELECT name,Total_order from `Customers` as T2 
JOIN OrderInfo as T1 ON `T2`.customer_id=`T2`.Customer_ID

-- List all products and their order quantities from OrderItems.
SELECT `OrderItems`.product_id, `OrderItems`.quantity from `OrderItems`

--Find the average salary of employees in the IT department

SELECT AVG(salary) from `Employees` WHERE department='IT'

--Select all orders made in June 2023
SELECT * from `Orders` WHERE order_date BETWEEN 01-05-2023 and 30-05-2023

-- List customers who have placed more than one order.

SELECT name,total_orders from `Customers` as T2 JOIN (SELECT `Orders`.customer_id, count(order_id) as total_orders from `Orders` GROUP BY customer_id) as T1
ON `T2`.customer_id=`T1`.customer_id

--Find products that have never been ordered
SELECT `Products`.name, `Products`.product_id from `Products` WHERE product_id NOT IN (SELECT product_id from `OrderItems`)

--Calculate the total revenue generated by each product.

SELECT product_id,name,revenue from `Products` AS P1 JOIN (SELECT `OrderItems`.order_item_id,`OrderItems`.quantity,`OrderItems`.price,`OrderItems`.quantity * OrderItems.price as revenue FROM `OrderItems`
GROUP BY order_item_id) as O1
ON `P1`.product_id= O1.order_item_id

--Use a subquery to list all customers who have never placed an order.
SELECT `Products`.name, `Products`.product_id FROM `Products` WHERE product_id NOT IN (SELECT OrderItems.product_id from `OrderItems` )

--Find the highest earning employee in each department.

WITH Max_sal(dept,max_salary) AS (SELECT `Employees`.department,max(Employees.salary) as Max_sal from `Employees` GROUP BY department)
SELECT `Employees`.name,`Employees`.salary, `Employees`.department, Max_sal.max_salary from `Employees` JOIN Max_sal ON `Employees`.salary=`Max_sal`.max_salary AND `Employees`.department=Max_sal.dept

SELECT department,name,salary from `Employees` AS E1 WHERE salary=(SELECT MAX(salary)from `Employees` WHERE department=E1.department)

--List all orders along with the names of the products ordered.

SELECT `Products`.name,`OrderItems`.order_id,`OrderItems`.price from `Products` JOIN `OrderItems` ON `Products`.product_id=`OrderItems`.product_id

-- Use CASE to categorize employees into salary brackets ('Low', 'Medium', 'High').

SELECT CASE 
    WHEN salary >= 6000 THEN  'High Salary'
    WHEN salary BETWEEN 6000 and 4000 THEN 'Medium Salary'
    ELSE  'Low Salary'
END AS 'Range',`Employees`.name from `Employees`


-- Copying Data into another table 

CREATE TABLE Customers_dup (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(15)
);

INSERT INTO `Customers_dup` SELECT * from `Customers`
